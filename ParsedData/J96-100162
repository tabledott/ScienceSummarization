s assumption: Of course, this assumption most likely won't be true.
    But since we know that fxY &lt; fy, it follows that Dicea(X,Y) is never less than the true value of the Dice coefficient between X and Y.1&#176; Comparing Dicea(X,Y) with the Dice threshold Td will only filter out words that are guaranteed not to have a high enough Dice coefficient value independently of their overall frequency fy; thus, this is the most efficient process for this task that also guarantees correctness.'
    Another possible implementation involves representing the words as integers using hashing.
    Then it would be possible to compute fy and the Dice coefficient in linear time.
    Our method, in comparison, takes 0(n log n) time to sort n candidates by their local frequency fxy, but it retrieves the frequency fy and computes the Dice coefficient for a much smaller percentage of them.
    In this section, we analyze the generative capacity of our algorithm.
    In particular, we compare it to the obvious method of exhau