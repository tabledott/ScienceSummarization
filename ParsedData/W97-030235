he fastest grammar we can think of we call the terminal grammar, because it has one nonterminal for each terminal symbol in the alphabet.
    The nonterminal symbol indicates the first terminal in its span.
    The parses are binary branching in the same way that the 6-gram grammar parses are.
    Figure 9 shows how to convert a parse tree to the terminal grammar.
    Since there is only one nonterminal possible for each cell of the chart, parsing is quick for this grammar.
    For technical and practical reasons, we actually wanted a marginally more complicated grammar, which included the &amp;quot;prime&amp;quot; symbol of the 6-gram grammar, indicating that a cell is part of the same constituent as its parent.
    Therefore, we doubled the size of the grammar so that there would be both primed and non-primed versions of each terminal; we call this the terminalprime grammar, and also show how to convert to it in Figure 9.
    This is the grammar we actually used as the first pass in our multiple-pass parsin