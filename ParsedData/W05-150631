1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2 4 8 16 32 64 Av er ag e He ap S ize k JM Algorithm with 10-5 beam Algorithm 3 with 10-5 beam JM Algorithm with 10-4 beam Algorithm 3 with 10-4 beam (b) Average heap size (Alg.
			3 vs. Jime?nez and Marzal) Figure 8: Efficiency results of the k-best Algorithms, compared to Jime?nez and Marzal?s algorithmheap size.
			Figure 8(b) shows that for larger k, the two al gorithms have the same average heap size, but for smaller k, our Algorithm 3 has a considerably smaller average heap size.
			This difference is useful in applications whereonly short k-best lists are needed.
			For example, McDon ald et al (2005) find that k = 5 gives optimal parsing accuracy.
			5.1.2 Accuracy Our efficient k-best algorithms enable us to search over a larger portion of the whole search space (e.g. by lessaggressive pruning), thus producing k-best lists with bet ter quality than previous methods.
			We demonstrate this by comparing our k-best lists to those in (Ratnaparkhi,1997), (Collins, 2000) and t