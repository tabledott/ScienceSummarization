oods 1970).
    This graph can be simplified by performing a compiler optimization call tail recursion (Church and Kaplan 1981 and references therein).
    This transformation replaces the final push arc with a jump: Jump Tail recursion corresponds directly to the algebraic operations of moving the ADJS term to the left hand side, factoring out the ADJS, and dividing from both sides.
    Then we remove the top jump arc by series reduction.
    This step corresponds to multiplying by 1 since a jump arc is the ATN representation for the identity element under series combination. where the zero-th term corresponds to zero iterations around the loop, the first term corresponds to a single iteration, the second term to two iterations, and so on.
    Recall that (36) is equivalent to: (37) 1 1&#8212;adj With this observation, it is possible to open the loop: (38) ADJS:01/(1-adj) Jump Pop After one final series reduction, the ATN is equivalent to expression (31e) above.
    Intuitively, an ATN loop (or step grammar)