software for in-class demonstrations.
    This context calls for highly interactive graphical user interfaces, making it possible to view program state (e.g. the chart of a chart parser), observe program execution step-by-step (e.g. execution of a finite-state machine), and even make minor modifications to programs in response to &#8220;what if&#8221; questions from the class.
    Because of these difficulties it is common to avoid live demonstrations, and keep classes for theoretical presentations only.
    Apart from being dull, this approach leaves students to solve important practical problems on their own, or to deal with them less efficiently in office hours.
    In this paper we introduce a new approach to the above challenges, a streamlined and flexible way of organizing the practical component of an introductory computational linguistics course.
    We describe NLTK, the Natural Language Toolkit, which we have developed in conjunction with a course we have taught at the University of Pennsylvania.
  