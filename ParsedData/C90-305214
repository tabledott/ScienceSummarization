 ~]] NOUN[sTmNO: ~ ,  c-s~.rm [Ell APPEND [F :~B:~,  w : ~  ] V [STR INO:~,  C-STR: PN[NAME: ~]  ]  : -- NAMErsrmNG: ~ ,  C-STm ~ ] VERB-PHRASE : [STRING: ~ ,  C-STR: VP[v: [~TV, NP: ~]  : -- TRANS_VERB[sTRINO: ~ ,  C-ST,R: [~1] NOUN_PHRASE[sTmNO: ~ ,  C-STR: ~ ] , APPEND [~:~ B: ~ ,  w : ~  ] LEXICAL-RULE = [STRING: ([~]), C-STR: [WORD: [~]].
  DETERMINER --= LEXICAL_RULE[c-sTm DET].
  NOUN = LEXlCAL.RULE[c-STR: N].
  NAME = LEXICAL-RULE[C-STm PN].
  TRANS_VERB = LEXICAL-RULE[C-STR: TV].
  4.3 Parsing and generation Both parsing and generation i  the system amount to type inference.
  Either (1) for parsing or (2) gen- eration yield the same result (3).
  (1 )  SENTENCE[sTRING: (Mary likes all men)] (2) SENTENCE NP: NP[NAME: MARY] Iv: LIKE ALL, o  : MANIJ (3) SENTENCE "sTR,NG: (lEMony []like, []a, Rime.)
  C-STR: S ~:  NP[...E: MARY[woRD: I~], .oR: aSG] vP: VP I v: UKE[woRD: [], AGR: ~] NP: NP [DET: ALL[WORD: [~, AOR: [~PL]] |NOUN: MAN[woRD: [~, AGR: [b]] / L^o~: [] J AGR: [] This shows that the formalism ha