#934;(t) &#945;&#175;Fort = 1... T1, j = 1... N If (z =&#65533; g) then &#945;&#175; = &#945;&#175; + &#934;(g) &#8722; &#934;(z) If cj &lt; T2 then Set the kth triple in the Cache to (g, T, 0) Calculate z = arg maxtEY,f &#934;(t) &#945;&#175; a method for dynamically generating constraints (i.e. incorrect parses) which are violated, or close to being violated, under the current parameter settings.
    The basic algorithm in Figure 1 is extremely wasteful with the generated constraints, in that it only looks at one constraint on each sentence (the arg max), and it ignores constraints implied by previously parsed sentences.
    This is inefficient because the generation of constraints (i.e., parsing an input sentence), is computationally quite demanding.
    More formally, it can be shown that the algorithm in figure 4 also has the upper bound in theorem 1 on the number of parameter updates performed.
    If the cost of steps 1 and 2 of the method are negligible compared to the cost of parsing a sentence, then