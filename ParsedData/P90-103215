emplates and a mechanism that would be able to gracefully merge and combine them with other types of constraints.
    The idea of a flexible lexicon is not novel in itself.
    The lexical representation used in [Jacobs 85] and later refined in [Desemer &amp; Jabobs 87] could also represent a wide range of expressions.
    However, in this language, collocational, syntactic and selectional constraints are mixed together into phrasal entries.
    This makes the lexicon both difficult to use and difficult to compile.
    In the following we briefly show how FUGs can be successfully used as they offer a flexible declarative language as well as a powerful mechanism for sentence generation.
    We have implemented a first version of Cook, a surface generator that uses a flexible lexicon for expressing co-occurrence constraints.
    Cook uses FUF [Elhaclad 90], an extended implementation of FUGs, to uniformly represent the lexicon and the syntax as originally suggested by Halliday [Halliday 66].
    Generating a se