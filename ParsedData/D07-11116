sing with a Data-Driven.
			Variant of the LR Algorithm The two main data structures in the algorithm are a stack S and a queue Q. S holds subtrees of the fi nal dependency tree for an input sentence, and Q holds the words in an input sentence.
			S is initia lized to be empty, and Q is initialized to hold every word in the input in order, so that the first word in the input is in the front of the queue.3 The parser performs two main types of actions: shift and reduce.
			When a shift action is taken, a word is shifted from the front of Q, and placed on the top of S (as a tree containing only one node, the word itself).
			When a reduce action is taken, the 2 The PATH scheme was chosen (even though Nivre and Nilsson report slightly better results with the HEAD scheme) because it does not result in a potentially qua dratic increase in the number of dependency label types, as observed with the HEAD and HEAD+PATH schemes.
			Unfortunately, experiments comparing the use of the different pseudo-projectivity scheme