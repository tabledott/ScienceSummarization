the case of the dependency between &#8220;kom&#8221; and &#8220;ik&#8221; the label would be &#8220;subject&#8221;.
    In a dependency tree every token must be the child of exactly one other node, either another token or the dummy root node.
    By definition, a dependency tree is free of cycles.
    For example, it must not contain dependency chains such as &#8220;en&#8221; __+ &#8220;kom&#8221; __+ &#8220;ik&#8221; &#8212;* &#8220;en&#8221;.
    For a more formal definition see previous work (Nivre et al., 2004).
    An important distinction between dependency trees is whether they are projective or nonprojective.
    Figure 1 is an example of a projective dependency tree, in such trees dependencies do not cross.
    In Dutch and other flexible word order languages such as German and Czech we also encounter non-projective trees, in these cases the trees contain crossing dependencies.
    Dependency parsing is useful for applications such as relation extraction (Culotta and Sorensen, 2004) and machine trans