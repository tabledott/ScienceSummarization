acks according to feature functions, inspired by Earley parsing (Earley, 1970; Stolcke, 1995) and generalized LR parsing (Tomita, 1991).
    However, our formalism is more flexible and our algorithm more practical.
    Specifically, we make the following contributions: input: w0 ... w,,,&#8722;1 axiom 0 : (0, &#491;): 0 where &#8467; is the step, c is the cost, and the shift cost &#958; and reduce costs &#955; and &#961; are: For convenience of presentation and experimentation, we will focus on shift-reduce parsing for dependency structures in the remainder of this paper, though our formalism and algorithm can also be applied to phrase-structure parsing.
  
  
    Shift-reduce parsing performs a left-to-right scan of the input sentence, and at each step, choose one of the two actions: either shift the current word onto the stack, or reduce the top two (or more) items at the end of the stack (Aho and Ullman, 1972).
    To adapt it to dependency parsing, we split the reduce action into two cases, rex and rey, d