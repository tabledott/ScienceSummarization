I ,  then it must be possible to generate the string x in G , since 11 , A t are in G. Hence x E L(G).
  Similarly if x E [q , we can show that x E L(G).
  Hence L t U L~ C L(G).
  If x E L(G), then x is derived using either only Ij, A t or only l~,A:tsince N I I"1 N,j =,, ~.
  Hence, x EL t  or X E t~  Thus, L(G} -- Lt U I~  Therefore, L(G) =- Lt U L~ 88 4.2.
  C lmure  under  Concatena~on Let G t - - ( l t ,At ,N~,St) ,  G ,  ,,, ([~.~=,N~,S~) be two TAGs generating Lt, I~ respectively, such that N I I1 N= =- ~.
  We cam construct ?
  TAG G =- (I, A, N, S) such that L(G)=,, L!
  We choo~ S such that S is not in Ns t,J N=.
  We let N - -  N t IJ N ,  U {S}, A ,m A t U An.
  For all t t E !1, t~ E I,, we add tl:~ to I, as shown in Fig 4.2.1.
  E It, t~ ~ l~), where the nodes in the subtrees tt and t~ of the tree t~= have the same coustra~atm mmocinted with them us in the original grammars G !
  it is easy to show that L(G) ,m L I .
  L~, once we note that there are no Nx i f ia~ trees in G rooted with the sym