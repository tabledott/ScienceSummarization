and nonprobabilistic aspects, is interesting and provides useful insights.
    The following remarks assume familiarity with both approaches.
    We sketch the fundamental relations, as well as the important tradeoffs between the two frameworks.13 Like an Earley parser, LR parsing uses dotted productions, called items, to keep track of the progress of derivations as the input is processed.
    The start indices are not part of LR items: we may therefore use the term &amp;quot;item&amp;quot; to refer to both LR items and Earley states without start indices.
    An Earley parser constructs sets of possible items on the fly, by following all possible partial derivations.
    An LR parser, on the other hand, has access to a complete list of sets of possible items computed beforehand, and at runtime simply follows transitions between these sets.
    The item sets are known as the &amp;quot;states&amp;quot; of the LR parser.'
    A grammar is suitable for LR parsing if these transitions can be performed determinist