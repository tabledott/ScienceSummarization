 is a division operator.
    We now have composition operators for parallel composition (addition), series composition (multiplication), and loops (division).
    An ATN loop can be implemented in terms of the table lookup scheme discussed above.
    First we reformulate the loop as an infinite sum: Then we construct a table so that the ith entry in the table tells the parser how to parse i occurrences of adj.
  
  
    Suppose for example that we were given the following grammar: (In this example we will assume no lexical ambiguity among N, V, P, and adj.)
    By inspection, we notice that NP and PP are Catalan grammars and that ADJS is a Step grammar.
    With these observations, the parser can process PPs, NPs, and ADJSs by counting the number of occurrences of terminal symbols and looking up those numbers in the appropriate tables.
    We now substitute (41a-c) into (40c).
    (42) VP = V NP (1 + PP)ADJS = V (N E Cati(P N)')(E Cati(P (E adji) and simplify the convolution of the two Catalan functions (43) 