r recognizer, and to generate random sentences for testing our interface with the back-end.
    A final practical feature of TINA is that, as in unification grammars, all unifications are nondestructive, and as a consequence, explicit backtracking is never necessary.
    Every hypothesis on the queue is independent of every other one, in the sense that activities performed by pursuing one lead do not disturb the other active nodes.
    This feature makes TINA an excellent candidate for parallel implementation.
    The control strategy would simply deliver the most probable node to an available processor.
    TINA has been implemented in Commonlisp and runs on both a Sun workstation and a Symbolics LISP machine.
    A deterministic word sequence can be parsed in a small fraction of real-time on either machine.
    Of course, once the input is a speech waveform rather than a word sequence, the uncertainty inherent in the proposed words will greatly increase the search space.
    Until we have a better handle on