ents become more familiar with the toolkit, they can be asked to make minor changes or extensions to an existing module.
    A more challenging task is to develop a new module.
    Here, NLTK provides some useful starting points: predefined interfaces and data structures, and existing modules that implement the same interface.
  
  
    As an example of a moderately difficult assignment, we asked students to construct a chunk parser that correctly identifies base noun phrase chunks in a given text, by defining a cascade of transformational chunking rules.
    The NLTK rechunkparser module provides a variety of regular-expression based rule types, which the students can instantiate to construct complete rules.
    For example, ChunkRule(&#8217;&lt;NN.W) builds chunks from sequences of consecutive nouns; ChinkRule(&#8217;&lt;VB.&gt;&#8217;) excises verbs from existing chunks; SplitRule(&#8217;&lt;NN&gt;&#8217;, &#8217;&lt;DT&gt;&#8217;) splits any existing chunk that contains a singular noun followed by determi