tained by combing these methods.
    In this paper, we use well-formed dependency structures to handle the coverage of non-constituent rules.
    The use of dependency structures is due to the flexibility of dependency trees as a representation method which does not rely on constituents (Fox, 2002; Ding and Palmer, 2005; Quirk et al., 2005).
    The well-formedness of the dependency structures enables efficient decoding through dynamic programming.
  
  
    A string-to-dependency grammar G is a 4-tuple G =&lt; R, X, Tf, Te &gt;, where R is a set of transfer rules.
    X is the only non-terminal, which is similar to the Hiero system (Chiang, 2007).
    Tf is a set of terminals in the source language, and Te is a set of terminals in the target language1.
    A string-to-dependency transfer rule R E R is a 4-tuple R =&lt; 5f, 5e, D, A &gt;, where 5f E (Tf U {X})+ is a source string, 5e E (Te U {X})+ is a target string, D represents the dependency structure for 5e, and A is the alignment between 5f and 5e.
    N