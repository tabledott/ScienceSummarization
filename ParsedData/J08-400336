&#963;cq and k &lt; j must either be a dependent of p in Gx or must have a head to the left in both Gx1 and Gx (anything else would again be inconsistent with the assumption that Gx is projective).
    Therefore, we can construct a transition sequence C0,m such that Gcm = Gx, by starting in c0 = cs(x) and applying exactly the same q transitions as in C0,q, followed by as many LEFT-ARCl transitions as there are left dependents of p in Gx, interleaving REDUCE transitions whenever the node on top of the stack already has a head, followed by a RIGHT-ARCel transition if p has a head in Gx and a SHIFT transition otherwise (in both cases moving p to the stack and emptying the buffer).
    &#9632; Theorem 5 The worst-case time complexity of the arc-eager, stack-based algorithm is O(n), where n is the length of the input sentence.
    Proof 5 The proof is essentially the same as Proof 2, except that both SHIFT and RIGHT-ARCel decrease the length of &#946; and increase the height of &#963;, while both REDUCE and LEFTAR