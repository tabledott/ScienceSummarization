stems, not hide them.
    Therefore, each class defined by the toolkit should be simple enough that a student could implement it by the time they finish an introductory course in computational linguistics.
    Modularity.
    The interaction between different components of the toolkit should be kept to a minimum, using simple, well-defined interfaces.
    In particular, it should be possible to complete individual projects using small parts of the toolkit, without worrying about how they interact with the rest of the toolkit.
    This allows students to learn how to use the toolkit incrementally throughout a course.
    Modularity also makes it easier to change and extend the toolkit.
    Comprehensiveness.
    The toolkit is not intended to provide a comprehensive set of tools.
    Indeed, there should be a wide variety of ways in which students can extend the toolkit.
    Efficiency.
    The toolkit does not need to be highly optimized for runtime performance.
    However, it should be efficient enough that