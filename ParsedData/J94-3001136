nite-state transducer.
    This representation has a number of remarkable advantages: (1) The program required to interpret this representation is simple almost to the point of triviality, no matter how intricate the original grammars might have been.
    (2) That same program can be used to generate surface or textual forms from underlying lexical representations or to analyze text into a lexical string; the only difference is in which of the two symbols on a transition is regarded as the input and which the output.
    (3) The interpreter is constant even under radical changes in the theory and the formalism that informed the compiler.
    (4) The compiler consists almost entirely of an implementation of the basic calculus.
    Given the operators and data types that this makes available, only a very few lines of code make up the compiler for a particular theory.
    Reflecting on the way the relation for a rewriting rule is constructed from simpler relations, and on how these are composed to create a singl