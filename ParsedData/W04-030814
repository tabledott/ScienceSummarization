on as the respective head and dependent are available, even if the dependent is not complete with respect to its own dependents.
    Following Abney and Johnson (1991), we will call this arc-eager parsing, to distinguish it from the standard bottom-up strategy discussed in the previous section.
    Using the same representation of parser configurations as before, the arc-eager algorithm can be defined by the transitions given in Figure 5, where wi and wj are arbitrary word tokens (Nivre, 2003): the stack to the next input token wj, and pushes wj onto the stack.
  
  
    4.
    The transition Shift (SH) pushes the next input token wi onto the stack.
    The transitions Left-Arc and Right-Arc, like their counterparts Left-Reduce and RightReduce, are subject to conditions that ensure lA purely terminological, but potentially confusing, difference is that Yamada and Matsumoto (2003) use the term Right for what we call Left-Reduce and the term Left for Right-Reduce (thus focusing on the position of the head inste