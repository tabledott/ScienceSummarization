s a finite space of parser states, which are abstractions over configurations.
			For this purpose we define a number of features that can be used to define different models of parser state.
			The features used in this study are listed in Table 1.
			The first five features (TOP?TOP.RIGHT) deal with properties of the token on top of the stack.
			In addition to the word form itself (TOP), we consider its part-of-speech (as assigned by an automatic part-of-speech tagger in a preprocessing phase), the dependency type by which it is related to its head (which may or may not be available in a given configuration depending on whether the head is to the left or to the right of the token in question), and the dependency types by which it is related to its leftmost and rightmost dependent, respectively (where the currentrightmost dependent may or may not be the rightmost de pendent in the complete dependency tree).
			The following three features (NEXT?NEXT.LEFT) refer to properties of the next input token.
			In th