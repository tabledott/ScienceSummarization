erties.
    In (Collins and Duffy, 2002), the SST tree kernel was experimented with the Voted Perceptron for the parse-tree reranking task.
    The combination with the original PCFG model improved the syntactic parsing.
    Additionally, it was alluded that the average execution time depends on the number of repeated productions.
    In (Vishwanathan and Smola, 2002), a linear complexity algorithm for the computation of the ST kernel is provided (in the worst case).
    The main idea is the use of the suffix trees to store partial matches for the evaluation of the string kernel (Lodhi et al., 2000).
    This can be used to compute the ST fragments once the tree is converted into a string.
    To our knowledge, ours is the first application of the ST kernel for a natural language task.
    In (Kazama and Torisawa, 2005), an interesting algorithm that speeds up the average running time is presented.
    Such algorithm looks for node pairs that have in common a large number of trees (malicious nodes) and applie