    However, we can simulate lookahead using states, as in these productions: By omitting rules like qpro NP &#8594; ..., we ensure that the entire production sequence will dead-end unless the first child of the input tree is in fact PRO.
    So finite lookahead is not a problem.
    The next problem is how to get the PRO to appear in between the V and NP, as in Arabic.
    This can be carried out using copying.
    We make two copies of the English VP, and assign them different states: While general properties of R are understood, there are many algorithmic questions.
    In this paper, we take on the problem of training probabilistic R transducers.
    For many language problems (machine translation, paraphrasing, text compression, etc.
    ), it is possible to collect training data in the form of tree pairs and to distill linguistic knowledge automatically.
    Our problem statement is: Given (1) a particular transducer with productions P, and (2) a finite training set of sample input/output tree pairs, we