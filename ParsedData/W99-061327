fiers.
    The pseudo-code describing the algorithm is given in Fig.
    2.
    The CoBoost algorithm described above divides the function Zco into two parts: Zco = 40 + 40.
    On each step CoBoost searches for a feature and a weight so as to minimize either 40 or 40.
    In Input: {(x1,i, Initialize: Vi, j : e(xi) = 0.
    For t = 1, T and for j = 1, 2: where 4 = exp(-jg'(xj,i)). practice, this greedy approach almost always results in an overall decrease in the value of Zco.
    Note, however, that there might be situations in which Zco in fact increases.
    One implementation issue deserves some elaboration.
    Note that in our formalism a weakhypothesis can abstain.
    In fact, during the first rounds many of the predictions of Th., g2 are zero.
    Thus corresponding pseudo-labels for instances on which gj abstain are set to zero and these instances do not contribute to the objective function.
    Each learner is free to pick the labels for these instances.
    This allow the learners to &amp;quot;boo