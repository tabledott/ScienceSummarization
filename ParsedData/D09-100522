#946;, and &#945; values in Figure 4 will turn out to be elements of a first-order expectation semiring, and they must still be constructed by first-order &#174; and &#174;, via calls to Figures 2&#8211;3.
    Why does inside-outside work?
    Whereas the inside algorithm computes &#174;dED &#174;eEd in any semiring, the inside-outside algorithm exploits the special structure of an expectation semiring.
    By that semiring&#8217;s definitions of &#174; and &#65533; ( PdED QeEd ke, PdED PeEd(Qe0Ed,e0&#65533;e ke0)xe).
    The first component (giving &#710;k) is found by calling the inside algorithm on just the ke part of the weights.
    The second component (giving &#710;x) can be rearranged into Pe Pd: eEd(Q7e''Ed,e0&#65533;e ke0)xe = Pe kexe, where ke def Pd: eEd (l le0Ed,e0&#65533;e ke0) is found from Q, &#945;.
    The application described at the start of this subsection is the classical inside-outside algorithm.
    Here (ke,xe) def = (pe, pere), and the algorithm returns (&#710;k, &#710;x) = (Z, r).
 