 the length of the reference sentence.
    Within this paper, we will refer to this distance as dCD .
    In the next subsection, we will show how it can be computed in O(I &#183; L) time using a modification of the Levenshtein algorithm.
    We also studied the reverse direction of the described measure; that is, we dropped the coverage constraints for the reference sentence instead of the candidate sentence.
    Additionally, the maximum of both directions has been considered as distance measure.
    The results in Section 5.2 will show that the measure using the originally proposed direction has a significantly higher correlation with human evaluation than the other directions.
    Our algorithm for calculating dCD is based on the dynamic programming algorithm for the Levenshtein distance (Levenshtein, 1966).
    The Levenshtein distance dLev(eI1, &#732;eL &#65533; between two strings eI1 and &#732;eL1 can be calculated in constant time if the Levenshtein distances of the substrings, dLev(eI&#8722;1 is sto