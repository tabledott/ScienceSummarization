 B : g ? A : f(g) (&gt;) B : g A\B : f ? A : f(g) (&lt;) The first rule states that a category with syntactic type A/B can be combined with a category to the right of syntactic type B to create a new category of type A. It also states that the new semantics will be formed by applying the function f tothe expression g. The second rule handles argu ments to the left.
			Using these rules, we can parse the 2For example, many question sentences have semantics of type ?e, t?, as in ?x.flight(x) ? to(x, boston).
			679 following phrase to create a new category of typeN : flights to boston N (N\N)/NP NP ?x.flight(x) ?y.?f.?x.f(x) ? to(x, y) boston &gt; (N\N) ?f.?x.f(x) ? to(x, boston) &lt; N ?x.flight(x) ? to(x, boston) The top-most parse operations pair each word with a corresponding category from the lexicon.
			The later steps are labeled ?&gt; (for each instance of forward application) or ?&lt; (for backward application).
			A second set of combinators in CCG grammars are the rules of functional composition: A/B