lgorithm 2 of Huang and Chiang (2005) to speed up the computation.
    For simplicity of presentation, we will use concrete SCFG-based examples, but the method applies to the general hypergraph framework in Section 2.
    Consider Figure 1(a).
    Here k = 3 and we use D(v) to denote the top-k +LM items (in sorted order) of node v. Suppose we have computed D(u1) and D(u2) for the two antecedent nodes u1 = (VP3,6) and u2 = (PP1,3) respectively.
    Then for the consequent node v = (VP1,6) we just need to derive the top-3 from the 9 combinations of (Di(u1), Dj(u2)) with i, j E [1, 3].
    Since the antecedent items are sorted, it is very likely that the best consequent items in this grid lie towards the upper-left corner.
    This situation is very similar to kbest parsing and we can adapt the Algorithm 2 of Huang and Chiang (2005) here to explore this grid in a best-first order.
    Suppose that the combination costs are negligible, and therefore the weight of a consequent item is just the product of the weigh