f tuples v consistent with the predicate at that node (v &#8712; w(p)), and S(x)}, where a set of pairs S is treated as a set-valued function S(x) = {y : (x, y) &#8712; S} with domain S1 = {x : (x, y) &#8712; S}.
    The logical forms in DCS are called DCS trees, where nodes are labeled with predicates, and edges are labeled with relations.
    Formally: Definition 1 (DCS trees) Let Z be the set of DCS trees, where each z &#8712; Z consists of (i) a predicate for each child i, the ji-th component of v must equal the j'i-th component of some t in the child&#8217;s denotation (t &#8712; JciKw).
    This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure, which will facilitate parsing.
    In addition, trees enable efficient computation, thereby establishing a new connection between dependency syntax and efficient semantic evaluation.
    Aggregate relation DCS trees that 