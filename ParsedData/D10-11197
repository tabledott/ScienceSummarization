an contain constants, quantifiers, logical connectors, and lambda abstractions.
    The advantage of using the lambda calculus lies in its generality.
    The meanings of individual words and phrases can be arbitrary lambda expressions, while the final meaning for a sentence can take different forms.
    It can be a full lambdacalculus expression, a variable-free expression such as answer(state(borders(tex))), or any other logical expression that can be built from the primitive meanings via function application and composition.
    The higher-order unification problem (Huet, 1975) involves finding a substitution for the free variables in a pair of lambda-calculus expressions that, when applied, makes the expressions equal each other.
    This problem is notoriously complex; in the unrestricted form (Huet, 1973), it is undecidable.
    In this paper, we will guide the grammar induction process using a restricted version of higherorder unification that is tractable.
    For a given expression h, we will need to