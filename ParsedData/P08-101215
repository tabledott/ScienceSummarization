ary m from n toward 1 until the first condition fails to hold.
    For each value where the second condition holds, we pause to search for the set of left boundaries within threshold.
    Likewise for the left edge, S[l, M] &#183; Qma=l+1 I(a) &#183; is a bitext cell within threshold.
    For right edges that are known to be within threshold, we can sweep the left edges leftward until the first condition no longer holds, keeping only those spans for which the second condition holds.
    The filtering algorithm behaves extremely well.
    Although the worst case runtime is still O(n4), the best case has improved to n3; empirically it seems to significantly reduce the amount of time spent exploring spans.
    Figure 2 compares the speed of the fast tic-tac-toe algorithm against the algorithm in Zhang and Gildea (2005).
  
  
    This section introduces a technique that bootstraps candidate phrase pairs for phrase-based ITG from word-based ITG Viterbi alignments.
    The wordbased ITG uses the same expansions fo