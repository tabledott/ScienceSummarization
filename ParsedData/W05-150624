8: procedure A?????N???(cand, p) 9: ?e, j?
			E??????-M??(cand) 10: append ?e, j?
			to p 11: for i?
			1 . . .
			|e| do . add the |e| neighbors 12: j?
			j + bi 13: if j?i ? |D?(Ti(e))| and ?e, j??
			&lt; cand then 14: I?????(cand, ?e, j??)
			add to heap Figure 5: Part of Algorithm 1.
			1: procedure F???A??KB???(k) 2: for v ? V in topological order do 3: F???KB???(v, k) 4: 5: procedure F???KB???(v, k) 6: G??C?????????(v, k) . initialize the heap 7: while |D?(v)| &lt; k and |cand[v]| &gt; 0 do 8: A?????N???(cand[v], D?(v)) 9: 10: procedure G??C?????????(v, k) 11: temp?
			{?e, 1?
			| e ? BS (v)} 12: cand[v]?
			the top k elements in temp . prune away useless candidates 13: H??????(cand[v]) Figure 6: Algorithm 2 1: procedure L???K??B???(v, k, k?)
			k? is the global k 2: if |D?(v)| ? k then . kth derivation already computed?
			3: return 4: if cand[v] is not defined then . first visit of vertex v?
			5: G??C?????????(v, k?)
			initialize the heap 6: append E??????-M??(cand[v]) to D?(v) . 1-best 7: while |